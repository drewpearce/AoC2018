from day_12 import challenge_12_1
from day_12 import challenge_12_2
from day_12 import find_recurrence
from day_12 import iterate_generations
from day_12 import parse_inputs

TEST_IN = [
    'initial state: #..#.#..##......###...###',
    '',
    '...## => #',
    '..#.. => #',
    '.#... => #',
    '.#.#. => #',
    '.#.## => #',
    '.##.. => #',
    '.#### => #',
    '#.#.# => #',
    '#.### => #',
    '##.#. => #',
    '##.## => #',
    '###.. => #',
    '###.# => #',
    '####. => #'
]


def test_parse_inputs():
    correct_state = '#..#.#..##......###...###'
    correct_rules = {
        '...##': '#',
        '..#..': '#',
        '.#...': '#',
        '.#.#.': '#',
        '.#.##': '#',
        '.##..': '#',
        '.####': '#',
        '#.#.#': '#',
        '#.###': '#',
        '##.#.': '#',
        '##.##': '#',
        '###..': '#',
        '###.#': '#',
        '####.': '#'
    }
    state, rules = parse_inputs(TEST_IN)
    assert state == correct_state
    assert rules == correct_rules


def test_iterate_generations():
    state, rules = parse_inputs(TEST_IN)
    tests = {
        1: ('...#...#....#.....#..#..#..#...', 3),
        2: ('...##..##...##....#..#..#..##..', 3),
        3: ('..#.#...#..#.#....#..#..#...#..', 3),
        4: ('...#.#..#...#.#...#..#..##..##.', 3),
        5: ('....#...##...#.#..#..#...#...#.', 3),
        6: ('....##.#.#....#...#..##..##..##', 3),
        7: ('...#..###.#...##..#...#...#...#...', 3),
        8: ('...#....##.#.#.#..##..##..##..##..', 3),
        9: ('...##..#..#####....#...#...#...#..', 3),
        10: ('..#.#..#...#.##....##..##..##..##.', 3),
        11: ('...#...##...#.#...#.#...#...#...#.', 3),
        12: ('...##.#.#....#.#...#.#..##..##..##', 3),
        13: ('..#..###.#....#.#...#....#...#...#...', 3),
        14: ('..#....##.#....#.#..##...##..##..##..', 3),
        15: ('..##..#..#.#....#....#..#.#...#...#..', 3),
        16: ('.#.#..#...#.#...##...#...#.#..##..##.', 3),
        17: ('..#...##...#.#.#.#...##...#....#...#.', 3),
        18: ('..##.#.#....#####.#.#.#...##...##..##', 3),
        19: ('.#..###.#..#.#.#######.#.#.#..#.#...#...', 3),
        20: ('.#....##....#####...#######....#.#..##..', 3)
    }
    for k, v in tests.items():
        assert iterate_generations(state, rules, k) == v


def test_challenge_12_1():
    gen = 20
    correct = 325

    assert challenge_12_1(TEST_IN, gen) == correct


def test_find_recurrence():
    assert find_recurrence(TEST_IN) == 86


def test_challenge_12_2():
    gen = 2000
    correct = 39374
    assert challenge_12_2(TEST_IN, gen) == correct
